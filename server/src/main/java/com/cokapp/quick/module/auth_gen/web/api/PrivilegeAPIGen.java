/*******************************************************************************
 * Service，重新生成不会覆盖
 * 
 * API For Privilege
 * Auto Generated by CokGen At 2016-03-14 17:37:26
 *
 * Copyright (c) cokapp.com
 * Email: dev@cokapp.com
 *******************************************************************************/
package com.cokapp.quick.module.auth_gen.web.api;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cokapp.quick.module.auth.entity.Privilege;
import com.cokapp.quick.module.auth.service.PrivilegeService;
import com.cokapp.quick.core.service.BaseService;
import com.cokapp.quick.core.web.controller.BaseController;
import com.cokapp.quick.core.web.view.JsonResult;

public abstract class PrivilegeAPIGen extends BaseController<Privilege, Long> {

	@Autowired
	private PrivilegeService svr;

	@RequestMapping(value = { "" }, method = { RequestMethod.POST })
	@ResponseBody
	public JsonResult<Privilege> create(@RequestBody Privilege entity) {
		this.getService().save(entity);
		return JsonResult.newSuccess(entity, "新建成功！");
	}

	@RequestMapping(value = "/{id}", method = { RequestMethod.DELETE })
	@ResponseBody
	public JsonResult<Privilege> delete(@PathVariable("id") Long id) {
		this.getService().delete(id);
		return JsonResult.<Privilege> newSuccess("删除成功！");
	}

	@Override
	protected BaseService<Privilege, Long> getBaseService() {
		return this.svr;
	}

	protected PrivilegeService getService() {
		return this.svr;
	}
	
	@RequestMapping(value = { "" }, method = { RequestMethod.GET })
	@ResponseBody
	public JsonResult<Privilege> list(HttpServletRequest request,
			@RequestParam(value = "paged", required = false, defaultValue = "false") Boolean paged) {
		JsonResult<Privilege> json = JsonResult.newSuccess();
		if (paged) {
			json.setData(this.findPage(request));
		} else {
			json.setData(this.findList(request));
		}
		return json;
	}
	
	@RequestMapping(value = { "/{id}" }, method = { RequestMethod.POST })
	@ResponseBody
	public JsonResult<Privilege> update(@RequestBody Privilege entity, @PathVariable("id") Long id) {
		entity.setId(id);
		this.getService().update(entity);
		return JsonResult.newSuccess(entity);
	}

	@RequestMapping(value = { "/{id}" }, method = { RequestMethod.GET }, produces = "application/json")
	@ResponseBody
	public JsonResult<Privilege> view(@PathVariable("id") Long id) {
		Privilege entity = this.getService().findOne(id);
		if (entity == null) {
			return JsonResult.newError("没有找到ID(%s)对应的记录！", id);
		}		
		return JsonResult.newSuccess(entity);
	}

}





