/*******************************************************************************
 * Service，重新生成不会覆盖
 *
 * Service For User
 * Auto Generated by CokGen At 2015-10-16 15:50:47
 *
 * Copyright (c) cokapp.com
 * Email: dev@cokapp.com
 *******************************************************************************/

package com.cokapp.quick.module.auth.service;

import java.util.Date;
import java.util.UUID;

import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;
import org.joda.time.DateTime;
import org.joda.time.Duration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cokapp.cokits.core.lang.exception.ExceptionUtils;
import com.cokapp.cokits.util.RegexUtils;
import com.cokapp.quick.core.security.AuthInfo;
import com.cokapp.quick.core.security.PasswordService;
import com.cokapp.quick.module.auth.entity.User;
import com.cokapp.quick.module.auth.entity.UserRegister;
import com.cokapp.quick.module.auth_gen.service.UserServiceGen;
import com.cokapp.quick.module.oauth.core.OAuthTypeEnum;
import com.cokapp.quick.module.oauth.entity.OAuthUser;
import com.cokapp.quick.module.oauth.service.OAuthUserService;

import io.jstack.sendcloud4j.SendCloud;
import io.jstack.sendcloud4j.mail.Email;
import io.jstack.sendcloud4j.mail.Substitution;
import io.jstack.sendcloud4j.mail.TemplateEmail;

/**
 *
 * @author dev@cokapp.com
 * @date 2015年8月31日 上午11:53:13
 */
@Service
@Transactional
public class UserService extends UserServiceGen {
	@Autowired
	private OAuthUserService oAuthUserService;
	@Autowired
	private UserRegisterService userRegisterService;

	private void autoGenWeixin(OAuthUser oAuthUser, String openid) {
		User user = new User();
		user.setUsername("weixin" + openid);
		this.autoRegister(oAuthUser, user);
	}

	/**
	 * 自动注册（回调时自动创建账号，默认密码为空）
	 *
	 * @param oAuthUser
	 * @param user
	 */
	public void autoRegister(OAuthUser oAuthUser, User user) {
		// 1.保存用户
		this.save(user);
		// 2.保存oauth用户并维护外键
		oAuthUser.setBindTo(user);
		user.getBinds().add(oAuthUser);
		this.oAuthUserService.save(oAuthUser);
	}

	public User findByGuid(String guid) {
		return this.getDao().findByGuid(guid);
	}

	public User findByName(String name) {
		return this.getDao().findByName(name);
	}

	/**
	 * 自动创建微信用户 由于服务号目前未认证，并不能申请微信登录，<br>
	 * 暂时根据用户关注企业号事件，简单自动创建用户
	 *
	 * @param openid
	 * @return
	 */
	public User genWeixinUser(String openid) {
		OAuthUser oAuthUser = this.oAuthUserService.findByOAuthTypeAndOAuthId(OAuthTypeEnum.WEIXIN, openid);

		if (oAuthUser == null) {
			oAuthUser = new OAuthUser();
			oAuthUser.setOAuthType(OAuthTypeEnum.WEIXIN);
			oAuthUser.setOAuthId(openid);
			this.autoGenWeixin(oAuthUser, openid);
		} else if (oAuthUser.getBindTo() == null) {
			this.autoGenWeixin(oAuthUser, openid);
		}

		return oAuthUser.getBindTo();
	}

	/**
	 * 获取当前用户
	 *
	 * @return
	 */
	public User getCurrentUser() {
		String guid = this.getCurrentUserGuid();
		return this.findByGuid(guid);
	}

	public String getCurrentUserGuid() {
		Subject currentUser = SecurityUtils.getSubject();
		AuthInfo authInfo = (AuthInfo) currentUser.getPrincipal();
		String guid = authInfo.getGuid();

		return guid;
	}

	public long getCurrentUserId() {
		User user = this.getCurrentUser();
		return user.getId();
	}

	public String getCurrentUserIdStr() {
		return String.valueOf(this.getCurrentUserId());
	}

	/**
	 * 用户登录
	 *
	 * @param user
	 * @return
	 */
	public String login(User user) {
		ExceptionUtils.wrapIfTrue(StringUtils.isBlank(user.getPassword()), "密码不能为空！");

		DateTime availableTime = new DateTime(user.getLastLogonFailureTime()).plusMinutes(30);
		Duration duration = new Duration(DateTime.now(), availableTime);
		if (user.getLogonFailureTimes() >= 10 && duration.getStandardSeconds() > 0) {
			ExceptionUtils.wrapBiz("最近登录失败太多次了，请【%s】秒后再次尝试！", duration.getStandardSeconds());
		}

		User dbUser = this.findByName(user.getEmail());
		ExceptionUtils.wrapIfTrue(dbUser == null, "不存在用户【%s】！", user.getEmail());

		String password = PasswordService.entryptPassword(user.getPassword(), dbUser.getGuid());
		if (!password.equals(dbUser.getPassword())) {
			dbUser.setLastLogonFailureTime(new Date());
			dbUser.setLogonFailureTimes(dbUser.getLogonFailureTimes() + 1);
			this.save(dbUser);
			ExceptionUtils.wrapIfTrue(!password.equals(dbUser.getPassword()), "密码错误！");
		}

		dbUser.setLogonFailureTimes(0);
		dbUser.setLastLogonTime(new Date());
		dbUser.setLogonTimes(dbUser.getLogonTimes() + 1);
		this.save(dbUser);

		String access_token = AuthInfo.gen(dbUser.getGuid()).serialize();

		return access_token;
	}

	/**
	 * 预注册
	 *
	 * @param email
	 */
	public void preRegister(String email) {
		// 0.校验
		ExceptionUtils.wrapIfTrue(!RegexUtils.isEmail(email), "Email无效！");

		// 1.判断是否存在账号
		User user = this.findByName(email);
		ExceptionUtils.wrapIfTrue(user != null, "该邮箱已经注册！");

		// 2.获取hash
		UserRegister userRegister = this.userRegisterService.findByEmail(email);
		if (userRegister == null) {
			userRegister = new UserRegister();
			userRegister.setEmail(email);
			userRegister.setHash(UUID.randomUUID().toString());
			userRegister.setRandomCode(RandomStringUtils.randomAlphanumeric(5));
			this.userRegisterService.save(userRegister);
		} else {
			DateTime availableTime = new DateTime(userRegister.getLastEmailDate()).plusSeconds(30);
			Duration duration = new Duration(DateTime.now(), availableTime);
			ExceptionUtils.wrapIfTrue(duration.getStandardSeconds() > 0, "请等待【%s】秒后再请求邮箱验证码！",
					duration.getStandardSeconds());
		}

		// 3.发送邮件
		String random_code = userRegister.getRandomCode();

		SendCloud webapi = SendCloud.createWebApi("kuaitie", "vWXt17k38162FSp9");
		TemplateEmail eml = Email.template("random_code_kuaitie").from("noreplay@notice.cokapp.com").fromName("快贴")
				.substitutionVars(Substitution.sub().set("random_code", random_code)).to(email);
		webapi.mail().send(eml);

		userRegister.setLastEmailDate(new Date());
		this.userRegisterService.update(userRegister);
	}

	/**
	 * 注册
	 *
	 * @param hash
	 * @return token
	 */
	public void register(User user, String randomCode) {
		// 0.校验
		ExceptionUtils.wrapIfTrue(StringUtils.isBlank(randomCode), "用户注册，随机码不能为空！");
		ExceptionUtils.wrapIfTrue(StringUtils.isBlank(user.getEmail()), "用户注册，邮箱不能为空！");
		ExceptionUtils.wrapIfTrue(StringUtils.isBlank(user.getPassword()), "用户注册，密码不能为空！");

		UserRegister userRegister = this.userRegisterService.findByEmail(user.getEmail());
		ExceptionUtils.wrapIfTrue(userRegister == null, "没有查询到随机码！");
		ExceptionUtils.wrapIfTrue(!randomCode.equals(userRegister.getRandomCode()), "随机码错误！");

		// 1.保存用户
		// 密码加密
		String entryptedPassword = PasswordService.entryptPassword(user.getPassword(), user.getGuid());
		user.setPassword(entryptedPassword);
		user.setEmailVerified(true);
		user.setUsername(user.getEmail());
		user.setNickname(user.getEmail());
		this.save(user);

		// 2.删除注册信息（逻辑删除）
		userRegister.setDel(true);
		this.userRegisterService.update(userRegister);
	}

}
